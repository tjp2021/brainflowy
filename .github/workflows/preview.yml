name: Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '20'

jobs:
  deploy-preview:
    name: Deploy PR Preview
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      deployments: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
        
      - name: Build application
        working-directory: frontend
        run: npm run build
        env:
          CI: true
          REACT_APP_API_URL: ${{ vars.PREVIEW_API_URL || vars.API_URL }}
          REACT_APP_ENVIRONMENT: preview
          PUBLIC_URL: /
          
      - name: Create deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.sha,
              environment: 'preview',
              description: `Preview deployment for PR #${context.payload.pull_request.number}`,
              auto_merge: false,
              required_contexts: [],
              production_environment: false
            });
            return deployment.data.id;
            
      - name: Deploy to Vercel Preview
        id: vercel-deploy
        run: |
          npm install -g vercel
          url=$(vercel deploy --token=${{ secrets.VERCEL_TOKEN }} --confirm)
          echo "preview_url=$url" >> $GITHUB_OUTPUT
        working-directory: frontend
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          
      - name: Update deployment status
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'success',
              environment_url: '${{ steps.vercel-deploy.outputs.preview_url }}',
              description: 'Preview deployment successful'
            });
            
      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const url = '${{ steps.vercel-deploy.outputs.preview_url }}';
            const prNumber = context.payload.pull_request.number;
            
            // Find and update existing comment or create new one
            const identifier = '<!-- preview-deployment-comment -->';
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });
            
            const existingComment = comments.data.find(comment => 
              comment.body.includes(identifier)
            );
            
            const body = `${identifier}
            ## üöÄ Preview Deployment
            
            Your pull request has been deployed for preview!
            
            | Environment | URL | Status |
            |------------|-----|--------|
            | Preview | ${url} | ‚úÖ Ready |
            
            ### Preview Features:
            - üîç Full application functionality
            - üé® Latest UI changes from this PR
            - üîÑ Auto-updates with new commits
            - üì± Mobile responsive testing
            
            ---
            *This comment will be updated automatically with each push to this PR.*
            `;
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: body
              });
            }

  lighthouse-preview:
    name: Lighthouse Audit on Preview
    runs-on: ubuntu-latest
    needs: deploy-preview
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Wait for preview deployment
        run: sleep 30
        
      - name: Run Lighthouse audit
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: |
            ${{ needs.deploy-preview.outputs.preview_url }}
          uploadArtifacts: true
          temporaryPublicStorage: true
          
      - name: Format Lighthouse results
        uses: actions/github-script@v7
        with:
          script: |
            const results = require('./lighthouse-results.json');
            const scores = results.categories;
            
            const comment = `
            ## üèÉ Lighthouse Performance Report
            
            | Metric | Score | Status |
            |--------|-------|--------|
            | Performance | ${scores.performance.score * 100}% | ${scores.performance.score > 0.9 ? '‚úÖ' : '‚ö†Ô∏è'} |
            | Accessibility | ${scores.accessibility.score * 100}% | ${scores.accessibility.score > 0.9 ? '‚úÖ' : '‚ö†Ô∏è'} |
            | Best Practices | ${scores['best-practices'].score * 100}% | ${scores['best-practices'].score > 0.9 ? '‚úÖ' : '‚ö†Ô∏è'} |
            | SEO | ${scores.seo.score * 100}% | ${scores.seo.score > 0.9 ? '‚úÖ' : '‚ö†Ô∏è'} |
            `;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: comment
            });